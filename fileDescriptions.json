{
	".gitignore": "Version control ignore configuration specifying directories and files to exclude from Git version tracking, including node modules, environment files, package locks, and upload directories.",
	"fileDescriptions.json": "Centralized JSON configuration for storing and managing file documentation descriptions across the project.",
	"package.json": "Root project configuration managing client and server scripts, dependency management, and development workflow for the IsraelBankMVP application.",
	"client/components.json": "Configuration schema for Shadcn UI library, defining project styling, component paths, Tailwind settings, and import aliases.",
	"client/eslint.config.js": "ESLint configuration for TypeScript React project, setting up recommended rules, browser globals, and React-specific linting for TypeScript and TSX files.",
	"client/index.html": "Entry point HTML file for the React application, configuring basic metadata, favicon, and loading the main TypeScript entry script.",
	"client/package.json": "Vite project configuration file specifying dependencies, scripts, and development tooling for a React client application with Radix UI, Tailwind CSS, and various utility libraries.",
	"client/postcss.config.js": "PostCSS configuration file setting up Tailwind CSS and autoprefixer plugins for style processing and cross-browser compatibility.",
	"client/tailwind.config.js": "Tailwind CSS configuration file with custom theme extensions, defining color palette, border radii, dark mode support, and animation keyframes for the application's design system.",
	"client/tsconfig.app.json": "TypeScript configuration file for the client application, specifying compiler options, module resolution, strict type checking, and source directory inclusion.",
	"client/tsconfig.json": "TypeScript configuration file for the client project, managing compiler options, path aliases, and referencing additional TypeScript configuration files for the application and Node.js environment.",
	"client/tsconfig.node.json": "TypeScript configuration for Node.js build process, defining strict compiler options and build settings for Vite project with ES module support.",
	"client/vite.config.ts": "Vite configuration file for React client, setting up development server proxies, path aliases, and build plugins with custom server settings.",
	"client/src/App.css": "Global CSS stylesheet defining root layout, logo styling, animation effects, and responsive design for the application's main components.",
	"client/src/App.tsx": "Root application component managing authentication, routing, theming, and global layout with protected routes and toast notifications.",
	"client/src/index.css": "Global CSS configuration for Tailwind, defining color variables, dark mode styles, and base layer styling for the application's theme and design system.",
	"client/src/main.tsx": "React application entry point, rendering the main App component within StrictMode and initializing the root DOM element.",
	"client/src/vite-env.d.ts": "TypeScript declaration file providing Vite client-side type references and environment configuration for the project.",
	"client/src/api/api.ts": "Axios-based API utility with automatic token refresh, interceptors for authentication, and wrapper methods for HTTP requests (GET, POST, PUT, DELETE).",
	"client/src/api/auth.ts": "Authentication API utility functions for login, register, and logout operations, handling user authentication requests and token management.",
	"client/src/api/banking.ts": "Banking API utility functions for retrieving account balances, transferring money, fetching transaction history, and accessing user profile using a local banking store with simulated API responses.",
	"client/src/components/Footer.tsx": "Footer component with fixed positioning, displaying attribution and branding information at the bottom of the page with a blurred background and border-top styling.",
	"client/src/components/Header.tsx": "Application header component with logo, theme toggle, and logout functionality, rendering a fixed top navigation bar with branding and user authentication actions.",
	"client/src/components/Layout.tsx": "Main application layout component rendering Header, Dashboard content, and Footer with a gradient background and responsive container styling.",
	"client/src/components/ProtectedRoute.tsx": "React route protection component that redirects unauthenticated users to the login page while rendering child components for authenticated users.",
	"client/src/components/banking/AccountCard.tsx": "Reusable React component for rendering bank account cards with dynamic styling, icons, and balance display, supporting checking, savings, and credit account types with loading state and responsive design.",
	"client/src/components/banking/DemoAccountsCard.tsx": "React component for displaying and switching between demo user accounts with role-based badges and interactive user selection functionality.",
	"client/src/components/banking/TotalBalanceCard.tsx": "Reusable React component for displaying total account balance with dynamic styling, trend indication, and loading state visualization using Shadcn UI card and Lucide icons.",
	"client/src/components/banking/TransactionHistory.tsx": "Renders a detailed transaction history card with dynamic icons, colors, and descriptions for different transaction types, including loading and empty states.",
	"client/src/components/banking/TransferForm.tsx": "React component for money transfers with form validation, recipient selection, and real-time balance checking using custom banking hooks and UI components.",
	"client/src/components/banking/TransferLogs.tsx": "React component for displaying and managing user banking transfer logs with real-time updates, transaction filtering, and interactive transaction history visualization.",
	"client/src/components/ui/accordion.tsx": "Radix UI-based Accordion component with customizable trigger, content, and item subcomponents, providing an accessible and animated expandable/collapsible interface.",
	"client/src/components/ui/alert-dialog.tsx": "Radix UI-based Alert Dialog component library with customizable overlay, content, header, footer, title, description, action, and cancel elements for creating responsive and accessible confirmation dialogs.",
	"client/src/components/ui/alert.tsx": "Reusable Alert component with customizable variants, supporting title and description, built using React and class-variance-authority for flexible styling.",
	"client/src/components/ui/aspect-ratio.tsx": "Radix UI AspectRatio wrapper component for maintaining consistent media and container proportions in responsive designs.",
	"client/src/components/ui/avatar.tsx": "Radix UI-based Avatar component with customizable image and fallback states, providing a flexible and accessible user profile image display mechanism.",
	"client/src/components/ui/badge.tsx": "Reusable Badge component with configurable variants using class-variance-authority, supporting default, secondary, destructive, and outline styles with dynamic styling and accessibility features.",
	"client/src/components/ui/breadcrumb.tsx": "Reusable Radix UI-based Breadcrumb component library with composable subcomponents for navigation, supporting custom styling, separators, and accessibility features.",
	"client/src/components/ui/button.tsx": "Reusable Button component with configurable variants and sizes, leveraging class-variance-authority for dynamic styling and supporting custom child rendering.",
	"client/src/components/ui/calendar.tsx": "Reusable calendar component built with react-day-picker, providing customizable styling and navigation with responsive design and extensive class-based theming.",
	"client/src/components/ui/card.tsx": "Reusable Card component library with composable subcomponents (Header, Title, Description, Content, Footer) for creating flexible and styled card interfaces in React.",
	"client/src/components/ui/carousel.tsx": "Reusable carousel component with Embla Carousel, supporting horizontal and vertical orientations, with navigation buttons and flexible configuration options.",
	"client/src/components/ui/chart.tsx": "Reusable chart component library with Recharts integration, providing customizable chart containers, tooltips, legends, and theme-aware styling utilities for React applications.",
	"client/src/components/ui/checkbox.tsx": "Radix UI-based Checkbox component with customizable styling, accessibility features, and a Check icon indicator for checked states.",
	"client/src/components/ui/collapsible.tsx": "Radix UI Collapsible component wrapper, exporting Root, Trigger, and Content components for creating expandable/collapsible UI elements.",
	"client/src/components/ui/command.tsx": "Reusable command palette component built with cmdk, providing composable UI elements for search, navigation, and interaction with customizable styling and accessibility.",
	"client/src/components/ui/context-menu.tsx": "Radix UI-based context menu component library with customizable subcomponents for creating flexible and accessible context menus in React applications.",
	"client/src/components/ui/dialog.tsx": "Radix UI-based Dialog component with customizable overlay, content, header, footer, title, and description, providing a flexible and accessible modal dialog system for React applications.",
	"client/src/components/ui/drawer.tsx": "Reusable drawer component library using Vaul, providing composable UI elements like DrawerContent, DrawerHeader, DrawerFooter with customizable styling and responsive design.",
	"client/src/components/ui/dropdown-menu.tsx": "Radix UI-based dropdown menu component library with comprehensive subcomponents for creating flexible, accessible, and customizable dropdown interfaces in React.",
	"client/src/components/ui/form.tsx": "Reusable form components library using React Hook Form, providing composable and accessible form elements with built-in error handling and state management.",
	"client/src/components/ui/hover-card.tsx": "Radix UI-based hover card component with customizable content positioning, styling, and animation for creating interactive hover information displays.",
	"client/src/components/ui/input-otp.tsx": "Reusable One-Time Password (OTP) input component with customizable slots, group, and separator, leveraging the input-otp library for flexible and interactive digit-based authentication interfaces.",
	"client/src/components/ui/input.tsx": "Reusable input component with responsive styling, utilizing Tailwind CSS classes and supporting forwarded refs for flexible form input rendering.",
	"client/src/components/ui/label.tsx": "Radix UI Label component with customizable styling using class-variance-authority, providing accessible and responsive label rendering with disabled state support.",
	"client/src/components/ui/menubar.tsx": "Radix UI-based Menubar component library with comprehensive subcomponents for creating accessible, customizable dropdown menus with keyboard navigation and styling support.",
	"client/src/components/ui/navigation-menu.tsx": "Radix UI-based navigation menu component with customizable trigger, content, and viewport, providing a flexible and animated navigation interface with responsive design.",
	"client/src/components/ui/pagination.tsx": "Reusable pagination component library with composable subcomponents for creating flexible and accessible navigation controls, including previous/next buttons, page links, and ellipsis indicators.",
	"client/src/components/ui/popover.tsx": "Radix UI Popover component with customizable positioning, styling, and animation for creating interactive floating content containers in React applications.",
	"client/src/components/ui/progress.tsx": "Radix UI Progress component with customizable styling, rendering a horizontal progress bar with dynamic width based on value prop.",
	"client/src/components/ui/radio-group.tsx": "Radix UI-based radio group component with customizable styling, exporting RadioGroup and RadioGroupItem for creating accessible and themeable radio button interfaces.",
	"client/src/components/ui/resizable.tsx": "Resizable panel components using react-resizable-panels, providing customizable horizontal and vertical panel groups with optional resize handles and styling utilities.",
	"client/src/components/ui/scroll-area.tsx": "Radix UI-based ScrollArea component with customizable vertical and horizontal scrollbars, providing a flexible and accessible scrolling interface for React applications.",
	"client/src/components/ui/select.tsx": "Radix UI-based Select component with customizable trigger, content, items, and scrolling, providing a flexible and accessible dropdown selection interface.",
	"client/src/components/ui/separator.tsx": "Radix UI Separator component with configurable orientation and styling, providing a flexible horizontal or vertical divider for UI layouts.",
	"client/src/components/ui/sheet.tsx": "Radix UI-based sheet (slide-out panel) component with configurable positioning, styling, and accessibility, exporting various subcomponents for creating interactive modal-like interfaces.",
	"client/src/components/ui/sidebar.tsx": "Comprehensive React sidebar component library with responsive design, mobile support, collapsible variants, context management, and multiple sub-components for building flexible navigation interfaces.",
	"client/src/components/ui/skeleton.tsx": "Reusable UI Skeleton component with animated pulse effect for loading states, utilizing Tailwind CSS classes and dynamic styling.",
	"client/src/components/ui/slider.tsx": "Radix UI-based Slider component with customizable styling, supporting touch interactions and accessibility features for range selection.",
	"client/src/components/ui/sonner.tsx": "Customizable toast notification component with theme support, utilizing Sonner library and next-themes for dynamic styling and rendering.",
	"client/src/components/ui/switch.tsx": "Radix UI-based Switch component with customizable styling, supporting checked/unchecked states and accessibility features.",
	"client/src/components/ui/table.tsx": "Reusable, composable React table component library with customizable subcomponents like Table, TableHeader, TableBody, TableRow, and TableCell, utilizing Tailwind CSS for styling and supporting advanced rendering patterns.",
	"client/src/components/ui/tabs.tsx": "Radix UI-based Tabs component with customizable list, trigger, and content elements, providing a flexible and accessible tabbed interface with styling and interaction support.",
	"client/src/components/ui/textarea.tsx": "Shadcn-inspired reusable Textarea component with responsive styling, accessibility features, and customizable class merging using the cn utility function.",
	"client/src/components/ui/theme-provider.tsx": "React context provider for managing theme (dark/light/system) with local storage persistence and dynamic theme switching.",
	"client/src/components/ui/theme-toggle.tsx": "React component for theme toggling between light and dark modes, using state management and dynamic icon rendering with Lucide icons.",
	"client/src/components/ui/toast.tsx": "Radix UI toast component library with customizable variants, providing a comprehensive set of composable toast-related components for displaying notifications with flexible styling and interaction.",
	"client/src/components/ui/toaster.tsx": "Reusable toast notification component that renders dynamic toast messages with optional titles, descriptions, and actions using a custom toast hook.",
	"client/src/components/ui/toggle-group.tsx": "Radix UI-powered toggle group component with customizable variants and sizing, exporting ToggleGroup and ToggleGroupItem for flexible multi-select interactions.",
	"client/src/components/ui/toggle.tsx": "Radix UI Toggle component with customizable variants and sizes, providing a flexible and accessible toggle button implementation using class-variance-authority for styling.",
	"client/src/components/ui/tooltip.tsx": "Radix UI-based tooltip component with customizable content, trigger, and provider for creating interactive hover information displays in React applications.",
	"client/src/contexts/AuthContext.tsx": "React authentication context managing user login, registration, and logout with state persistence in local storage, providing authentication-related methods and user data across the application.",
	"client/src/hooks/useBanking.ts": "React hook managing banking-related state and actions, providing user profile, money transfer, user switching, and data refresh functionality through a centralized banking store.",
	"client/src/hooks/useMobile.tsx": "React hook for detecting mobile screen width, providing a boolean flag based on a 768px breakpoint.",
	"client/src/hooks/useToast.ts": "Custom React hook for managing toast notifications with state management, supporting adding, updating, dismissing, and removing toasts with a configurable limit and automatic timeout.",
	"client/src/hooks/useTransactions.ts": "Custom React hook for managing and fetching transaction history, providing real-time updates through state management and API integration.",
	"client/src/lib/utils.ts": "Utility function for merging Tailwind CSS classes using clsx and tailwind-merge, enabling dynamic and conditional class composition.",
	"client/src/pages/BlankPage.tsx": "404 error page component with a stylized card design, displaying a \"Page Not Found\" message and a button to return to the home page using React Router and Shadcn UI components.",
	"client/src/pages/Dashboard.tsx": "Banking dashboard page rendering user profile, account details, transfer form, transaction history, and user switching functionality with responsive design and loading states.",
	"client/src/pages/Login.tsx": "Login page component with form validation using Zod and react-hook-form, handling user authentication, password visibility toggle, and navigation to dashboard upon successful login.",
	"client/src/pages/Register.tsx": "User registration page with form validation using Zod, React Hook Form, and custom password strength requirements, featuring a responsive UI with password visibility toggle and error handling.",
	"client/src/utils/bankingStore.ts": "State management class for banking application, handling user accounts, transactions, balance tracking, and providing methods for money transfers and user profile retrieval.",
	"client/src/utils/currency.ts": "Currency utility functions for parsing, formatting, and normalizing Israeli Shekel (ILS) monetary values, including conversion to float, formatting with symbol, and total balance calculations.",
	"client/src/utils/transactionManager.ts": "Transaction management utility for handling money transfers, tracking user transactions, and generating dashboard payloads with account and transaction data.",
	"client/src/utils/transactionNormalizer.ts": "Transaction normalization utility that converts raw transaction data into a standardized format, determining transaction direction, peer, sign, and classification for consistent financial transaction representation.",
	"client/src/utils/transactionStore.ts": "State management utility for transactions with methods to add, retrieve, and subscribe to transaction updates, including a mock initial dataset and reactive listener pattern.",
	"client/src/utils/transferLogger.ts": "Utility module for logging and tracking transfer actions, generating unique transfer log entries and dispatching custom events with detailed transaction information.",
	"client/src/utils/userNames.ts": "Utility functions for generating and formatting user display names from email addresses, providing methods to extract and capitalize usernames.",
	"server/.env": "Environment configuration file for server, storing critical connection parameters like database URL, JWT secrets, and application port.",
	"server/package.json": "Node.js server configuration file specifying project dependencies, scripts, and metadata for the backend application.",
	"server/server.js": "Express.js server configuration with database initialization, authentication routes, error handling, and CORS support for a web application backend.",
	"server/config/database.js": "MongoDB connection utility with robust connection management, error handling, and graceful shutdown mechanism for database initialization.",
	"server/models/User.js": "User model defining database schema, validation methods, and object mapping for user entities with role-based access and authentication support.",
	"server/models/init.js": "Database initialization module that connects to SQLite3, creates necessary tables like User, and handles database setup process.",
	"server/routes/authRoutes.js": "Express router handling user authentication routes with login, register, logout, token refresh, and user profile retrieval endpoints.",
	"server/routes/index.js": "Express router configuration handling root and health check routes with welcome and ping endpoints.",
	"server/routes/middlewares/auth.js": "Authentication middleware for validating JWT tokens and enforcing role-based access control, ensuring only authorized users with specific roles can access protected routes.",
	"server/services/llmService.js": "LLM service module for sending requests to OpenAI and Anthropic, with retry mechanism and error handling for generating AI responses.",
	"server/services/userService.js": "User management service providing CRUD operations for user accounts, with methods for authentication, password management, and database interactions using SQLite.",
	"server/utils/auth.js": "JWT token generation utility for creating access and refresh tokens with user ID payload and configurable expiration periods.",
	"server/utils/password.js": "Password utility functions for secure password hashing, validation, and format checking using bcrypt, with methods to generate hash, compare passwords, and validate hash format.",
	"shared/config/roles.js": "Role configuration module defining application user roles with admin and user constants, exporting role enums and a list of all available roles.",
	"shared/types/user.ts": "TypeScript interface defining the core User model with unique identifier, email, role, and timestamp properties for user management.",
	"server/db.db": "SQLite database file for user management, storing user credentials, roles, refresh tokens, and authentication-related metadata with indexed email and refresh token columns.",
	"server/scripts/seed.js": "Database seeding script that initializes the application with predefined demo users, handling database setup, user creation, and providing test account credentials."
}